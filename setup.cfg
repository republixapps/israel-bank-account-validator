[tool:pytest]
markers =
    live: marks tests uses real database (deselect with '-m "not live"')

[flake8]
ignore = D101,D104,D106,D203,D400,D401,D403,F403,W503,D100,D102,D103,D107,L001,D105,B008,C901
exclude =
    .git,
    __pycache__,
    charts
filename =
    *.py
max-complexity=12
max-line-length=119
max-linenumber=500
accept-encodings=utf-8,utf-16
inline-quotes=single
multiline-quotes=double

[isort]
force_single_line=true
line_length=119
forced_separate=true
force_alphabetical_sort_within_sections=true

[yapf]
align_closing_bracket_with_visual_indent=True
allow_multiline_dictionary_keys=False
allow_multiline_lambdas=False
allow_split_before_default_or_named_assigns=True
allow_split_before_dict_value=False
arithmetic_precedence_indication=False
blank_lines_around_top_level_definition=2
blank_lines_between_top_level_imports_and_variables=1
blank_line_before_class_docstring=False
blank_line_before_module_docstring=False
blank_line_before_nested_class_or_def=True
coalesce_brackets=True
column_limit=119

# The style for continuation alignment. Possible values are:
#
# - SPACE: Use spaces for continuation alignment. This is default behavior.
# - FIXED: Use fixed number (CONTINUATION_INDENT_WIDTH) of columns
#   (ie: CONTINUATION_INDENT_WIDTH/INDENT_WIDTH tabs or
#   CONTINUATION_INDENT_WIDTH spaces) for continuation alignment.
# - VALIGN-RIGHT: Vertically align continuation lines to multiple of
#   INDENT_WIDTH columns. Slightly right (one tab or a few spaces) if
#   cannot vertically align continuation lines with indent characters.
continuation_align_style=SPACE

# Indent width used for line continuations.
continuation_indent_width=4

# Put closing brackets on a separate line, dedented, if the bracketed
# expression can't fit in a single line. Applies to all kinds of brackets,
# including function definitions and calls. For example:
#
#   config = {
#       'key1': 'value1',
#       'key2': 'value2',
#   }        # <--- this bracket is dedented and on a separate line
#
#   time_series = self.remote_client.query_entity_counters(
#       entity='dev3246.region1',
#       key='dns.query_latency_tcp',
#       transform=Transformation.AVERAGE(window=timedelta(seconds=60)),
#       start_ts=now()-timedelta(days=3),
#       end_ts=now(),
#   )        # <--- this bracket is dedented and on a separate line
dedent_closing_brackets=True

# Disable the heuristic which places each list element on a separate line
# if the list is comma-terminated.
disable_ending_comma_heuristic=False

# Place each dictionary entry onto its own line.
each_dict_entry_on_separate_line=True

# Require multiline dictionary even if it would normally fit on one line.
# For example:
#
#   config = {
#       'key1': 'value1'
#   }
force_multiline_dict=True
i18n_comment=
i18n_function_call=
indent_blank_lines=False
indent_closing_brackets=False

# Indent the dictionary value if it cannot fit on the same line as the
# dictionary key. For example:
#
#   config = {
#       'key1':
#           'value1',
#       'key2': value1 +
#               value2,
#   }
indent_dictionary_value=False
indent_width=4

# Join short lines into one line. E.g., single line 'if' statements.
join_multiple_lines=False
no_spaces_around_selected_binary_operators=
spaces_around_default_or_named_assign=False
spaces_around_dict_delimiters=False
spaces_around_list_delimiters=False
spaces_around_power_operator=True
spaces_around_subscript_colon=False
spaces_around_tuple_delimiters=False
spaces_before_comment=2
space_between_ending_comma_and_closing_bracket=True
space_inside_brackets=False
split_all_comma_separated_values=False
split_all_top_level_comma_separated_values=False
split_arguments_when_comma_terminated=False
split_before_arithmetic_operator=False
split_before_bitwise_operator=True
split_before_closing_bracket=True
split_before_dict_set_generator=True
split_before_dot=False
split_before_expression_after_opening_paren=False
split_before_first_argument=True
split_before_logical_operator=True
split_before_named_assigns=True

# Set to True to split list comprehensions and generators that have
# non-trivial expressions and multiple clauses before each of these
# clauses. For example:
#
#   result = [
#       a_long_var + 100 for a_long_var in xrange(1000)
#       if a_long_var % 10]
#
# would reformat to something like:
#
#   result = [
#       a_long_var + 100
#       for a_long_var in xrange(1000)
#       if a_long_var % 10]
split_complex_comprehension=True

# The penalty for splitting right after the opening bracket.
split_penalty_after_opening_bracket=300

# The penalty for splitting the line after a unary operator.
split_penalty_after_unary_operator=10000

# The penalty of splitting the line around the '+', '-', '*', '/', '//',
# ``%``, and '@' operators.
split_penalty_arithmetic_operator=300

# The penalty for splitting right before an if expression.
split_penalty_before_if_expr=0

# The penalty of splitting the line around the '&', '|', and '^'
# operators.
split_penalty_bitwise_operator=300

# The penalty for splitting a list comprehension or generator
# expression.
split_penalty_comprehension=80

# The penalty for characters over the column limit.
split_penalty_excess_character=7000

# The penalty incurred by adding a line split to the unwrapped line. The
# more line splits added the higher the penalty.
split_penalty_for_added_line_split=30

# The penalty of splitting a list of "import as" names. For example:
#
#   from a_very_long_or_indented_module_name_yada_yad import (long_argument_1,
#                                                             long_argument_2,
#                                                             long_argument_3)
#
# would reformat to something like:
#
#   from a_very_long_or_indented_module_name_yada_yad import (
#       long_argument_1, long_argument_2, long_argument_3)
split_penalty_import_names=100000

# The penalty of splitting the line around the 'and' and 'or'
# operators.
split_penalty_logical_operator=300
use_tabs=False
